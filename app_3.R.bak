# setwd("C:\\Users\\spfeiffe\\OneDrive - Environmental Protection Agency (EPA)\\_mine\\Shiny_apps\\_not_active_at_the_moment\\demo_(Latin)") 
#
#testdict <- c('M', 'b', 'c', 'Mi', 'Mic', 'f')
#allPossibleLatinRoots <- testdict[which(sapply(testdict, function(X){startsWith("Mickey", X)}))]
#thisLatinRoot <- allPossibleLatinRoots[max(sapply(allPossibleLatinRoots, nchar))]
#
ui <- fluidPage	(
				textInput	(
							"userEnteredString",
							"Enter exact Latin verb(-form) here:",
							value=""
							),
				uiOutput("translationGuide")
				)
server <- function(input, output)
	{
	##################################################################################
	# Load constants
	##################################################################################
	output$translationGuide <- renderText("Loading constants...")
	require(assertthat)
	require(stringi)
	if (!exists("dict"))
		{
		dict <- as.matrix(read.table("dict/all_regular.tsv", header=FALSE, fileEncoding="UTF-8-BOM", sep='\t', quote='"')[,1:4]) # conj, root, meaning, present_stem/perfect_stem/PPP 
		}
	if (!exists("casePoss"))
		{
		casePoss <- as.matrix(read.csv("case_poss/all_conj_not_dep.csv", header=FALSE))
		}
	allEndings <- unique(casePoss[,1]) # all possible endings
	output$translationGuide <- renderTable	(
											{
											if (nchar(trimws(input$userEnteredString)) == 0)
												{
												###
												###
												###
												paste0("Waiting.....")
												###
												###
												###
												} else	{
														if (length(which(sapply(dict[,2], function(X){startsWith(input$userEnteredString, X)}))) != 0) 
															{
															allPossibleLatinRoots <- unique(dict[which(sapply(dict[,2], function(X){startsWith(input$userEnteredString, X)})), 2]) 
															if (length(which(sapply(allPossibleLatinRoots,nchar) == nchar(input$userEnteredString))) > 0)
																{
																APLRWANTWI <- # All Possible Latin Roots Which Are Not The Word Itself 
																  allPossibleLatinRoots[-which(sapply(allPossibleLatinRoots,nchar) == nchar(input$userEnteredString))]
																} else	{
																		APLRWANTWI <- allPossibleLatinRoots
																		}
															thisLatinRoot <- APLRWANTWI[which(sapply(APLRWANTWI,nchar) == max(sapply(APLRWANTWI,nchar)))]
															thisLatinEnding <- substr(input$userEnteredString, nchar(thisLatinRoot)+1, nchar(input$userEnteredString))
															dictHits <- dict[which(dict[,2] == thisLatinRoot), ]
															outMat <- matrix(nrow=1, ncol=4, data=c(paste0(thisLatinRoot, "-"), paste0("-", thisLatinEnding))) 
															
															
															
															
															if ("matrix" %in% class(dictHits)) # 2 or more rows returned
																{
																outMat[1,3] <- stringi::stri_flatten(c(dictHits[1,1], dictHits[1,4]), collapse=" ")
																for (i in 2:nrow(dictHits))
																	{
																	outMat <- rbind(outMat, c("", "", stringi::stri_flatten(c(dictHits[i,1], dictHits[i,4]), collapse=" "))) 
																	}
																} else	{ # 1 row returned
																		outMat[1,3] <- stringi::stri_flatten(c(dictHits[1], dictHits[4]), collapse=" ")
																		}
															###
															###
															###
															unique(outMat)
															###
															###
															###
															} else	{
																	###
																	###
																	###
																	paste0("This word does not appear to be in this app's dictionary - make sure it is spelled correctly, is a regular verb, and if in a form derived from the PPP, does not include a space or linking verb.") 
																	###
																	###
																	###
																	}
														}
											},
											colnames=FALSE
											)
	}
shinyApp(ui=ui, server=server)
